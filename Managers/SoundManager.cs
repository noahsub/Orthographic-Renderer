////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SoundManager.cs
// This file manages sound operations such as playing audio files.
//
// Copyright (C) 2024 noahsub
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using System.Threading;
using System.Threading.Tasks;
using NAudio.Wave;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Orthographic.Renderer.Managers;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SOUND MANAGER CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
/// Manages sound operations such as playing audio files.
/// </summary>
public static class SoundManager
{
    /// <summary>
    /// Plays a sound from the specified file path.
    /// </summary>
    /// <param name="path">The path to the audio file.</param>
    public static void PlaySound(string path)
    {
        // Run the audio file in a separate thread
        Task.Run(() =>
        {
            // Create a new audio file reader and output device
            using var audioFile = new AudioFileReader(path);
            using var outputDevice = new WaveOutEvent();
            // Initialize the output device and play the audio file
            outputDevice.Init(audioFile);
            outputDevice.Play();

            // Wait for the audio file to finish playing
            while (outputDevice.PlaybackState == PlaybackState.Playing)
            {
                Thread.Sleep(250);
            }
        });
    }
}
