////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ViewSelection.axaml.cs
// This file contains the logic for the ViewSelection control.
//
// Author(s): https://github.com/noahsub
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using Avalonia.Controls;
using Avalonia.Media.Imaging;
using Orthographic.Renderer.Managers;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Orthographic.Renderer.Controls;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VIEW SELECTION CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
/// The ViewSelection control is used to display a view with an image and a checkbox to select the view. 
/// </summary>
public partial class ViewSelection : UserControl
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PROPERTIES
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// The key for the associated view, see <see cref="RenderManager.RenderViews"/> for assignable values.
    /// </summary>
    public string Key { get; set; } = "";

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INITIALIZATION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public ViewSelection()
    {
        InitializeComponent();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // GETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Get if the view is selected.
    /// </summary>
    /// <returns>If the view is selected return true, otherwise false.</returns>
    public bool GetSelected()
    {
        var value = SelectCheckBox.IsChecked;
        if (value == null)
        {
            return false;
        }

        return (bool)SelectCheckBox.IsChecked!;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SETTERS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Set the title of the view.
    /// </summary>
    /// <param name="title">The title of the view</param>
    public void SetName(string title)
    {
        var name = RenderManager.GetFormattedViewName(title);
        NameLabel.Content = name;
        Key = title;
    }

    /// <summary>
    /// Set the image of the view.
    /// </summary>
    /// <param name="imagePath">The path to the image</param>
    public void SetImage(string imagePath)
    {
        ViewImage.Source = new Bitmap($"Assets/Images/RenderAngles/{imagePath}.png");
    }

    /// <summary>
    /// Set the selected state of the view.
    /// </summary>
    /// <param name="selected">The selected state of the view</param>
    public void SetSelected(bool selected)
    {
        SelectCheckBox.IsChecked = selected;
    }
}
