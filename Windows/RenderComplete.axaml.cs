////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RenderComplete.axaml.cs
// This file contains the logic for the RenderComplete window.
//
// Author(s): https://github.com/noahsub
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using Avalonia.Controls;
using Avalonia.Input;
using Avalonia.Interactivity;
using Orthographic.Renderer.Managers;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Orthographic.Renderer.Windows;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RENDER COMPLETE CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
/// Represents the render complete window of the application.
/// </summary>
public partial class RenderComplete : Window
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INITIALIZATION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Initializes a new instance of the <see cref="RenderComplete"/> class.
    /// </summary>
    public RenderComplete()
    {
        InitializeComponent();
        // Add the window to the list of open windows
        WindowManager.AddWindow(this);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SET VALUES
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Sets the values to be displayed in the render complete window.
    /// </summary>
    /// <param name="startTime">The start time of the render.</param>
    /// <param name="endTime">The end time of the render.</param>
    /// <param name="totalTime">The total time taken for the render.</param>
    /// <param name="completed">The number of completed renders.</param>
    /// <param name="failed">The number of failed renders.</param>
    public void SetValues(
        string startTime,
        string endTime,
        string totalTime,
        int completed,
        int failed
    )
    {
        StartTimeLabel.Content = $"Start Time: {startTime}";
        EndTimeLabel.Content = $"End Time: {endTime}";
        RenderTimeLabel.Content = $"Total Time: {totalTime}";
        RendersCompleted.Content = $"Completed: {completed}";
        RendersFailed.Content = $"Failed: {failed}";
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // EVENTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Handles the click event of the Close button.
    /// </summary>
    private void CloseButton_OnClick(object? sender, RoutedEventArgs e)
    {
        Close();
    }

    private void InputElement_OnPointerPressed(object? sender, PointerPressedEventArgs e)
    {
        // if cursor is on within the first 30 pixels of the window, move the window
        if (e.GetCurrentPoint(this).Position.Y < 30)
        {
            BeginMoveDrag(e);
        }
    }

    /// <summary>
    /// Removes the window from the list of open windows when it is closed.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void TopLevel_OnClosed(object? sender, EventArgs e)
    {
        // Remove the window from the list of open windows
        WindowManager.RemoveWindow(this);
    }
}
