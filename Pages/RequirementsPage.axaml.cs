////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RequirementsPage.axaml.cs
// This file contains the logic for the RequirementsPage.
//
// Copyright (C) 2024 noahsub
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMPORTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Media;
using LibreHardwareMonitor.Software;
using Orthographic.Renderer.Constants;
using Orthographic.Renderer.Controls;
using Orthographic.Renderer.Interfaces;
using Orthographic.Renderer.Managers;
using Orthographic.Renderer.Windows;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Orthographic.Renderer.Pages;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// REQUIREMENTS PAGE CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// <summary>
/// Represents the requirements page of the application.
/// </summary>
public partial class RequirementsPage : UserControl, IPage
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INITIALIZATION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Initializes a new instance of the <see cref="RequirementsPage"/> class.
    /// </summary>
    public RequirementsPage()
    {
        Initialize();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // EVENTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Handles the click event of the Next button.
    /// </summary>
    private void NextButton_OnClick(object? sender, RoutedEventArgs e)
    {
        // Fix the path
        BlenderFilePathSelector.FixPath();
        // Check if the path is valid
        BlenderFilePathSelector.CheckPath(FileType.Executable);

        // Get the path
        var path = BlenderFilePathSelector.GetPath();

        // Save the Blender path if it has changed
        if (!string.Equals(DataManager.BlenderPath, path))
        {
            DataManager.BlenderPath = path;
        }

        // Switch to the hardware page
        var mainWindow = (MainWindow)this.VisualRoot!;
        NavigationManager.SwitchPage(mainWindow, "HardwarePage");
    }

    /// <summary>
    /// Handles the click event of the Blender Install button.
    /// </summary>
    private void BlenderInstallButton_OnClick(object? sender, RoutedEventArgs e)
    {
        WebManager.OpenUrl("https://www.blender.org/download/lts/4-2/");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // IPAGE INTERFACE IMPLEMENTATION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Initializes the RequirementsPage.
    /// </summary>
    public void Initialize()
    {
        InitializeComponent();
    }

    /// <summary>
    /// When the page is first loaded by the user.
    /// </summary>
    public void OnFirstLoad()
    {
        LoadBlenderPath();
    }

    /// <summary>
    /// When the page is navigated to.
    /// </summary>
    public void OnNavigatedTo()
    {
        LoadBlenderPath();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // HELPER FUNCTIONS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// <summary>
    /// Loads the Blender path from memory.
    /// </summary>
    private void LoadBlenderPath()
    {
        // Check if the Blender path is not empty
        if (DataManager.BlenderPath != String.Empty)
        {
            // Set the Blender path
            BlenderFilePathSelector.SetPath(DataManager.BlenderPath);
            // Mark the path as valid
            BlenderFilePathSelector.MarkValid();
        }
    }
}
